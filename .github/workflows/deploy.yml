# ====================== CI/CD Deploy simpletest ======================
name: CI/CD Deploy simpletest             # –ù–∞–∑–≤–∞–Ω–∏–µ –ø–∞–π–ø–ª–∞–π–Ω–∞ (–≤–∏–¥–Ω–æ –≤ GitHub Actions)
on:
  push:
    branches: [ "main" ]                  # –¢—Ä–∏–≥–≥–µ—Ä: –∑–∞–ø—É—Å–∫ –ø—Ä–∏ –ø—É—à–µ –≤ –≤–µ—Ç–∫—É main
env:
  IMAGE_NAME: almuko/simpletest           # –ò–º—è Docker-–æ–±—Ä–∞–∑–∞ (–≤–∞—à —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–π –Ω–∞ Docker Hub)
jobs:
  # ====================== Build & Push Docker Image ======================
  build-and-push:                         # –î–∂–æ–± –¥–ª—è —Å–±–æ—Ä–∫–∏ –∏ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ –æ–±—Ä–∞–∑–∞
    runs-on: ubuntu-latest                # –ò—Å–ø–æ–ª—å–∑—É–µ–º GitHub-hosted runner (Ubuntu VM)
    steps:
      - name: Checkout code
        uses: actions/checkout@v3         # –ó–∞–±–∏—Ä–∞–µ–º –∏—Å—Ö–æ–¥–Ω–∏–∫–∏ –∏–∑ —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏—è

      - name: Log in to Docker Hub
        uses: docker/login-action@v2      # –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –≤ Docker Hub
        with:
          username: ${{ secrets.DOCKER_USERNAME }}   # –õ–æ–≥–∏–Ω –∏–∑ GitHub Secrets
          password: ${{ secrets.DOCKER_PASSWORD }}   # –ü–∞—Ä–æ–ª—å –∏–∑ GitHub Secrets

      - name: Build and Push Docker Image
        uses: docker/build-push-action@v4 # –°–±–æ—Ä–∫–∞ –∏ –ø—É–±–ª–∏–∫–∞—Ü–∏—è Docker –æ–±—Ä–∞–∑–∞
        with:
          context: .                      # –ö–æ–Ω—Ç–µ–∫—Å—Ç —Å–±–æ—Ä–∫–∏ (—Ç–µ–∫—É—â–∞—è –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—è)
          push: true                      # –í–∫–ª—é—á–∞–µ–º –ø—É—à –≤ Docker Hub
          tags: |
            ${{ env.IMAGE_NAME }}:latest
            ${{ env.IMAGE_NAME }}:${{ github.sha }}    
  # ====================== Deploy to Kubernetes ======================
  deploy:
    runs-on: ubuntu-latest                # –í—Ç–æ—Ä–æ–π –¥–∂–æ–± –¥–ª—è –¥–µ–ø–ª–æ—è –≤ Kubernetes
    needs: build-and-push                 # –ó–∞–ø—É—Å–∫ —Ç–æ–ª—å–∫–æ –ø–æ—Å–ª–µ —É—Å–ø–µ—à–Ω–æ–≥–æ build-and-push
    steps:
      - name: Checkout repo
        uses: actions/checkout@v3         # –°–Ω–æ–≤–∞ –∫–ª–æ–Ω–∏—Ä—É–µ–º —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–π (–Ω—É–∂–Ω—ã yaml –º–∞–Ω–∏—Ñ–µ—Å—Ç—ã)

      - name: Install kubectl
        uses: azure/setup-kubectl@v4      # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º kubectl
        with:
          version: latest

      - name: Setup Kubeconfig
        shell: bash
        run: |                            # –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º kubeconfig –∏–∑ GitHub Secrets
          mkdir -p "$HOME/.kube"
          cat > "$HOME/.kube/config" <<'EOF'
          ${{ secrets.KUBECONFIG }}
          EOF

      - name: Install cert-manager
        run: |                            # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º cert-manager (–¥–ª—è TLS)
            helm repo add jetstack https://charts.jetstack.io
            helm repo update
            helm upgrade --install cert-manager jetstack/cert-manager \
              --namespace cert-manager \
              --create-namespace \
              --set installCRDs=true

            # –ñ–¥—ë–º –ø–æ–∫–∞ –≤—Å–µ –ø–æ–¥—ã cert-manager —Å—Ç–∞–Ω—É—Ç Ready
            kubectl rollout status deployment/cert-manager -n cert-manager --timeout=180s
            kubectl rollout status deployment/cert-manager-webhook -n cert-manager --timeout=180s
            kubectl rollout status deployment/cert-manager-cainjector -n cert-manager --timeout=180s


      - name: Deploy ClusterIssuer (Let's Encrypt)
        run: kubectl apply --validate=false -f k8s/cluster-issuer.yaml
        # –ü–æ–¥–∫–ª—é—á–∞–µ–º ClusterIssuer –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ –≤—ã–ø—É—Å–∫–∞ —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç–æ–≤

      - name: Deploy Postgres (only if not exists)
        run: |                            # –ü–æ–¥–Ω–∏–º–∞–µ–º Postgres, –µ—Å–ª–∏ –µ–≥–æ –Ω–µ—Ç
          if ! kubectl get statefulset postgres -n default >/dev/null 2>&1; then
            echo "Postgres not found. Creating..."
            kubectl apply -f k8s/postgres.yaml
            kubectl rollout status statefulset/postgres -n default --timeout=180s
          else
            echo "‚úÖ Postgres already exists. Skipping creation."
          fi

      - name: Recreate simpletest-db-secret
        run: |                            # –û–±–Ω–æ–≤–ª—è–µ–º —Å–µ–∫—Ä–µ—Ç —Å DATABASE_URL
          kubectl delete secret simpletest-db-secret -n default --ignore-not-found
          kubectl create secret generic simpletest-db-secret \
            --from-literal=DATABASE_URL="postgres://postgres:Zxcvbnm123@postgres:5432/simpletest?sslmode=disable"

      - name: Cleanup old migration job and pods
        run: |                            # –ß–∏—Å—Ç–∏–º —Å—Ç–∞—Ä—ã–π Job –º–∏–≥—Ä–∞—Ü–∏–π –∏ –µ–≥–æ Pod'—ã
          if kubectl get job simpletest-migrate -n default >/dev/null 2>&1; then
            echo "üóë Deleting old migration job..."
            kubectl delete job simpletest-migrate -n default
          fi
          echo "üßπ Cleaning up old migration pods..."
          for pod in $(kubectl get pods -n default -l job-name=simpletest-migrate -o jsonpath='{.items[*].metadata.name}'); do
            kubectl delete pod -n default $pod --ignore-not-found || true
          done

      - name: Run migrations Job
        run: |                            # –ó–∞–ø—É—Å–∫–∞–µ–º –º–∏–≥—Ä–∞—Ü–∏–∏ —á–µ—Ä–µ–∑ Job
          kubectl apply -f k8s/migrate.yaml
          echo "‚è≥ Waiting for migrations to complete..."
          if ! kubectl wait --for=condition=complete job/simpletest-migrate -n default --timeout=600s; then
            echo "‚ùå Migration job did not complete. Showing logs from all pods..."
            for pod in $(kubectl get pods -n default -l job-name=simpletest-migrate -o jsonpath='{.items[*].metadata.name}'); do
              echo "üîπ Logs from pod: $pod"
              kubectl logs -n default $pod || true
              echo "--------------------------------------"
            done
            exit 1
          fi
          echo "‚úÖ Migration job completed successfully."
          kubectl delete job simpletest-migrate -n default --ignore-not-found

      - name: Deploy App (Deployment + Service + Ingress)
        run: kubectl apply -f k8s/simpletest.yaml
        # –î–µ–ø–ª–æ–π –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è –≤ –∫–ª–∞—Å—Ç–µ—Ä (Deployment, Service –∏ Ingress)

      - name: Wait for app rollout
        run: kubectl rollout status deployment/simpletest -n default --timeout=180s
        # –ñ–¥—ë–º, –ø–æ–∫–∞ –¥–µ–ø–ª–æ–π–º–µ–Ω—Ç –∑–∞–≤–µ—Ä—à–∏—Ç—Å—è

      - name: Wait for TLS certificate
        run: |                            # –ñ–¥—ë–º –ø–æ–∫–∞ cert-manager –≤—ã–ø—É—Å—Ç–∏—Ç TLS —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç
          echo "‚è≥ Waiting for TLS certificate simpletest-tls..."
          kubectl wait --for=condition=Ready certificate/simpletest-tls -n default --timeout=300s || \
            (echo "‚ùå TLS certificate was not issued" && kubectl describe certificate simpletest-tls -n default && exit 1)

      - name: Debug simpletest pods if rollout fails
        if: failure()                     # –ï—Å–ª–∏ –¥–µ–ø–ª–æ–π —É–ø–∞–ª ‚Äî –≤—ã–≤–æ–¥–∏–º –ª–æ–≥–∏
        run: |
          kubectl get pods -n default
          for pod in $(kubectl get pods -n default -l app=simpletest -o jsonpath='{.items[*].metadata.name}'); do
            echo "Logs from $pod"
            kubectl logs -n default $pod --tail=50 || true
            echo "---"
          done

      - name: Test API health endpoint
        run: |                            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ API –æ—Ç–≤–µ—á–∞–µ—Ç
          echo "üåç Testing API endpoint..."
          curl -vk --retry 5 --retry-delay 10 https://simpletest.compnet.kz/health | grep '"status":"ok"'

      - name: Show Ingress and endpoints
        run: |                            # –û—Ç–ª–∞–¥–∫–∞: –≤—ã–≤–æ–¥–∏–º ingress, —Å–µ—Ä–≤–∏—Å—ã –∏ pod'—ã
          kubectl get ingress -n default
          kubectl get svc -n default
          kubectl get pods -o wide -n default
